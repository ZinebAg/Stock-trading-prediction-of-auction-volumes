# -*- coding: utf-8 -*-
"""Tune_lasso.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNyZObpxQPKy6suolmj2EE5phQ7eC68k
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import matplotlib.pyplot as plt
# %matplotlib inline 
import numpy as np
import matplotlib.animation as animation
import sys
import math
import seaborn as sns
import datetime
import random
from statsmodels.tsa.seasonal import seasonal_decompose
from dateutil.parser import parse
from statsmodels.tsa.stattools import adfuller, kpss
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.impute import KNNImputer

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from sklearn.cluster import KMeans, DBSCAN
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

import sys

import re

import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.preprocessing import scale
from sklearn.feature_selection import RFE
from sklearn.linear_model import LinearRegression,Lasso,Lasso
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import cross_validate
from sklearn.ensemble import RandomForestRegressor as RFR


from numpy import arange
from pandas import read_csv
from sklearn.linear_model import LassoCV
from sklearn.model_selection import RepeatedKFold

random.seed(10)

#train data to run the model
y=pd.read_csv("/content/drive/MyDrive/Master Semester Project/data/output_training_IxKGwDV.csv")
y=y.target

#reading the dataframes with the different imputings
data_RF_KNN = pd.read_csv("/content/drive/MyDrive/Master Semester Project/data/data_RF_KNN_2.csv.gz", compression='gzip')

# scaling the train dataset
data_RF_KNN.iloc[:,4:127] =scale(data_RF_KNN.iloc[:,4:127])

# reading the test models
test_data_RF_KNN = pd.read_csv("/content/drive/MyDrive/Master Semester Project/data/test_RF_KNN_2.csv.gz", compression='gzip')

# scaling the train dataset
test_data_RF_KNN.iloc[:,4:127] =scale(test_data_RF_KNN.iloc[:,4:127])

submission_file_template= pd.read_csv("/content/drive/MyDrive/Master Semester Project/notebooks/Week6/submission_csv_file_random_example.csv")

"""# Lasso"""

#--------------------------------
#_test_data_RF_KNN
#--------------------------------

print("data_RF_KNN")
model_1 = Lasso()
model_1.fit(data_RF_KNN, y)

test_predict_RF_KNN_Lasso = model_1.predict(test_data_RF_KNN)

RF_KNN_Lasso=submission_file_template.copy()
RF_KNN_Lasso.target=test_predict_RF_KNN_Lasso

RF_KNN_Lasso=RF_KNN_Lasso.set_index('ID')
RF_KNN_Lasso.to_csv("/content/drive/MyDrive/Master Semester Project/notebooks/Week6/submissions/Scale_RF_KNN_Lasso.csv")

# looking at the regression fit:
train_predict = model_1.predict(data_RF_KNN)
print("mse = ", mean_squared_error(train_predict,y))
print("R2 = ", r2_score(y,train_predict))

# define model evaluation method
cv = RepeatedKFold(n_splits=2, n_repeats=3, random_state=1)
# define model
model = LassoCV(alphas=arange(0, 1, 0.01), cv=cv)
# fit model
model.fit(data_RF_KNN, y)
# summarize chosen configuration
print('alpha: %f' % model.alpha_)


test_predict_RF_KNN_Lasso = model.predict(test_data_RF_KNN)

RF_KNN_Lasso=submission_file_template.copy()
RF_KNN_Lasso.target=test_predict_RF_KNN_Lasso

RF_KNN_Lasso=RF_KNN_Lasso.set_index('ID')
RF_KNN_Lasso.to_csv("/content/drive/MyDrive/Master Semester Project/notebooks/Week6/submissions/Scale_tune_Lasso_v1.csv")

# looking at the regression fit:
train_predict = model.predict(data_RF_KNN)
print("mse = ", mean_squared_error(train_predict,y))
print("R2 = ", r2_score(y,train_predict))

# define model evaluation method
cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)
# define model
model = LassoCV(alphas=arange(0, 1, 0.01), cv=cv)
# fit model
model.fit(data_RF_KNN, y)
# summarize chosen configuration
print('alpha: %f' % model.alpha_)


test_predict_RF_KNN_Lasso = model.predict(test_data_RF_KNN)

RF_KNN_Lasso=submission_file_template.copy()
RF_KNN_Lasso.target=test_predict_RF_KNN_Lasso

RF_KNN_Lasso=RF_KNN_Lasso.set_index('ID')
RF_KNN_Lasso.to_csv("/content/drive/MyDrive/Master Semester Project/notebooks/Week6/submissions/Scale_tune_Lasso_v2.csv")

# looking at the regression fit:
train_predict = model.predict(data_RF_KNN)
print("mse = ", mean_squared_error(train_predict,y))
print("R2 = ", r2_score(y,train_predict))